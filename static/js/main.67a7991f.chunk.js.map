{"version":3,"sources":["reducers/catList.js","reducers/duelView.js","reducers/index.js","store.js","actions.js","api.js","components/catList.js","components/cat.js","components/duel.js","App.js","serviceWorker.js","index.js"],"names":["initialState","catList","reducer","state","action","type","cats","images","map","c","Object","assign","count","winner","loser","selectedCat","payload","cat","Math","floor","random","length","combineReducers","listView","duelView","store","createStore","applyMiddleware","logger","loadCats","api","path","a","fetch","response","ok","json","Error","text","error","statusText","status","getCats","CatList","connect","sort","b","Grid","container","direction","justify","alignItems","AppBar","position","Toolbar","style","display","flexDirection","justifyContent","to","textDecoration","Button","size","List","marginTop","el","ListItem","key","id","ListItemAvatar","Avatar","src","url","alt","height","width","ListItemText","margin","useStyles","makeStyles","hover","cursor","opacity","Cat","onClick","points","classes","className","backgroundImage","backgroundSize","backgroundRepeat","Typography","variant","color","align","ConnectedDuel","props","addPoint","bind","voted","duelCats","this","dispatch","setState","cat1","cat2","randomCat2","getSecondCat","fontStyle","getRandomCats","undefined","React","Component","Duel","catScores","catsWithVotes","App","syncData","unsubscribe","basename","exact","component","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67a7991f.chunk.js","sourcesContent":["const initialState = {\n    catList: [],\n}\n\nconst reducer = (state = initialState, action) => {\n    if (action.type === 'LOAD_CAT_LIST') {\n        const cats = action.cats.images.map(c => {\n            return Object.assign(c, {count: 0})\n        })\n        return {\n            ...state,\n            catList: cats\n        }\n    }\n    return state\n}\n\nexport default reducer\n","const initialState = {\n    winner: {},\n    loser: {},\n}\n\nconst reducer = (state = initialState, action) => {\n    if (action.type === 'ADD_POINT') {\n        const selectedCat = action.payload.cat;\n        const catList = action.payload.catList;\n        Object.assign(selectedCat, {count: selectedCat.count + 1});\n        const loser = catList[Math.floor(Math.random() * catList.length)]\n        return {\n            ...state,\n            winner: selectedCat,\n            loser: loser !== selectedCat ? loser : catList[Math.floor(Math.random() * catList.length)]\n        }\n    }\n\n    return state\n}\n\nexport default reducer","import { combineReducers } from 'redux';\nimport listView from './catList';\nimport duelView from './duelView';\n\nconst reducer = combineReducers({\n    listView,\n    duelView,\n})\n\nexport default reducer","import { applyMiddleware, createStore } from 'redux'\nimport logger from 'redux-logger'\nimport reducer from './reducers/index.js'\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n\nexport default store;\n","export const loadCats = cats => ({ \n    type: 'LOAD_CAT_LIST', \n    cats \n})\n\nexport const addScores = (cat, catList) => ({\n    type: 'ADD_SCORES',\n    payload: {cat, catList}\n})\n\nexport const addPoint = (cat, catList) => ({\n    type: 'ADD_POINT',\n    payload: {cat, catList}\n})","const api = async (path) => {\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n  const response = await fetch(proxyUrl + path)\n  if (response.ok) {\n    return response.json()\n  } else {\n    const error = Error(await response.text())\n    error.statusText = response.statusText\n    error.status = response.status\n    throw error\n  }\n}\n\nconst path = 'https://latelier.co/data/cats.json';\n\n\nconst getCats = () => api(path)\n\nexport default { getCats };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { List, ListItem, ListItemAvatar, ListItemText, Avatar, Grid, Button, AppBar,Toolbar } from '@material-ui/core';\nimport { Link } from \"react-router-dom\";\n\nconst mapStateToProps = state => {\n    const cats = state.listView.catList;\n    cats.sort((a, b) => b.count - a.count)\n    return { cats };\n};\nconst ConnectedList = ({ cats }) => (\n    <Grid container direction='row' justify='center' alignItems='center'>\n        <div >\n        <AppBar position='fixed' >\n            <Toolbar style={{display: 'flex', flexDirection:'row', justifyContent:'space-between'}}>\n            \n            <Link to='/' style={{ textDecoration: 'none'}}><Button size=\"large\" >BACK TO VOTING</Button></Link>\n            <h1>SCORES</h1>\n            </Toolbar>\n            \n        </AppBar>\n        </div>\n        \n        <List style={{marginTop:120}}>\n            {cats.map(el => (\n                <ListItem key={el.id}>\n                    <ListItemAvatar>\n                        <Avatar src={el.url} alt='cat picture' style={{ height: 100, width: 100 }}/>\n                    </ListItemAvatar>\n                    <ListItemText style={{ margin: 30 }}>SCORE: {el.count}</ListItemText>\n                </ListItem>\n            ))}\n        </List>\n    </Grid>\n\n);\nconst CatList = connect(mapStateToProps)(ConnectedList);\n\nexport default CatList","import React from \"react\";\nimport { Grid, Typography } from '@material-ui/core';\nimport '../App.css';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    hover: {\n        '&:hover': {\n            cursor: 'pointer',\n            opacity: 0.5,\n        },\n    }\n});\n\nexport const Cat = ({ cat, onClick }) => {\n    const url = cat.url;\n    const points = cat.count;\n    const classes = useStyles();\n    return (\n        <Grid style={{ margin: 30 }} direction='column' justify='center' >\n            <div className={classes.hover} style={{ height: 400, width: 400, backgroundImage: `url(${url})`, backgroundSize: 'cover', backgroundRepeat: 'no-repeat' }} onClick={onClick}>\n\n            </div >\n            <Typography variant='body1' color='primary' align='center' style={{ margin: 10 }}>\n                {points > 1 ? `${points} points` : `${points} point`}\n            </Typography>\n        </Grid>\n\n    )\n}","import React from 'react';\nimport { connect } from \"react-redux\";\nimport store from '../store';\nimport { addScores, addPoint } from '../actions';\nimport { Cat } from './cat';\nimport { Link } from \"react-router-dom\";\nimport { Grid, Button, Typography } from '@material-ui/core';\n\nclass ConnectedDuel extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.addPoint = this.addPoint.bind(this);\n        this.state = {\n            voted: false,\n        }\n    }\n\n    addPoint(el) {\n        const { duelCats } = this.props;\n        store.dispatch(addPoint(el, duelCats));\n        this.setState({ voted: true })\n    }\n\n    getRandomCats() {\n        const { duelCats, winner, loser } = this.props;\n        const { voted } = this.state;\n\n        const getSecondCat = (cat1) => {\n            const randomCat2 = duelCats[Math.floor(Math.random() * duelCats.length)];\n            return randomCat2 === cat1 ? duelCats[Math.floor(Math.random() * duelCats.length)] : randomCat2;\n        }\n\n        const cat1 = !voted ? duelCats[Math.floor(Math.random() * duelCats.length)] : winner;\n        const cat2 = !voted ? getSecondCat(cat1) : loser;\n\n        return (\n            <div style={{ width: '100%' }}>\n                <Typography variant='h2' align='center' color='primary' style={{ margin: 10 }}> CAT MASH</Typography>\n                <Typography variant='h4' align='center'  color='primary' style={{ margin: 10, fontStyle:'italic' }}>Vote for the cutest cat !!!</Typography>\n\n                <Grid container justify=\"space-around\" alignItems=\"center\">\n                    <Cat cat={cat1} onClick={() => this.addPoint(cat1)} />\n                    <Cat cat={cat2} onClick={() => this.addPoint(cat2)} />\n                </Grid>\n            </div>\n\n        )\n    }\n\n    render() {\n        return (\n            <Grid container justify=\"space-around\" alignItems=\"center\" >\n                {this.props.duelCats.length > 0 ? this.getRandomCats() : undefined}\n                <Link to='/list' style={{ textDecoration: 'none' }}><Button style={{ width: '90vw' }} variant=\"outlined\" size=\"large\" color=\"primary\">GO TO SCORES</Button></Link>\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const catScores = state.listView.catsWithVotes;\n    const duelCats = state.listView.catList;\n    const winner = state.duelView.winner;\n    const loser = state.duelView.loser;\n    return {\n        duelCats, winner, loser, catScores\n    };\n}\n\nconst Duel = connect(mapStateToProps)(ConnectedDuel)\n\n\nexport default Duel;\n","import React from 'react';\nimport './App.css';\nimport store from './store';\nimport { loadCats } from './actions';\nimport api from './api';\nimport CatList from './components/catList';\nimport Duel from './components/duel';\nimport { HashRouter, Route } from 'react-router-dom';\n\nclass App extends React.Component {\n  syncData = async () => {\n    const cats = await api.getCats()\n    store.dispatch(loadCats(cats))\n  }\n\n\n  componentDidMount() {\n    // this.unsubscribe = store.subscribe(() => this.forceUpdate())\n    this.syncData()\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <Route exact path=\"/\" component={Duel}/>\n        <Route path=\"/list\" component={CatList}/>\n      </HashRouter>\n\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n    serviceWorker.unregister()\n);\n\n\n\n\n\n"],"sourceRoot":""}