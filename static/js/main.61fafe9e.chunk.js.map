{"version":3,"sources":["reducers/catList.js","reducers/duelView.js","reducers/index.js","store.js","actions.js","api.js","catList.js","cat.js","duel.js","App.js","serviceWorker.js","index.js"],"names":["initialState","catList","catsWithVotes","reducer","state","action","type","cats","images","map","c","Object","assign","count","winner","loser","selectedCat","payload","cat","Math","floor","random","length","combineReducers","listView","duelView","store","createStore","applyMiddleware","logger","loadCats","api","path","a","fetch","response","ok","json","Error","text","error","statusText","status","getCats","CatList","connect","sort","b","List","el","ListItem","key","id","ListItemAvatar","Avatar","src","url","alt","ListItemText","Cat","onClick","points","Card","style","height","width","margin","CardMedia","backgroundSize","image","title","CardActions","ConnectedDuel","props","addPoint","bind","voted","cat1","cat2","duelCats","this","dispatch","setState","display","flexDirection","justifyContent","getRandomCats","undefined","to","React","Component","Duel","catScores","addScores","App","syncData","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61fafe9e.chunk.js","sourcesContent":["const initialState = {\n    catList: [],\n    catsWithVotes: [],\n}\n\nconst reducer = (state = initialState, action) => {\n    if (action.type === 'LOAD_CAT_LIST') {\n        const cats = action.cats.images.map(c => {\n            return Object.assign(c, {count: 0})\n        })\n        return {\n            ...state,\n            catList: cats\n        }\n    }\n\n    // if (action.type === 'ADD_SCORES') {\n    //     const cats = action.payload.catList;\n    //     const votedCat = action.payload.cat;\n    //     const catsWithVotes = cats.map(c => {\n    //         const count = c.count ? c.count : 0\n    //         if (c.id === votedCat.id) {\n                \n    //             return Object.assign(c, {count: count + 1})\n    //         }\n    //         else { return Object.assign(c, {count: count}) }\n    //     })\n    //     return {\n    //         ...state,\n    //         catsWithVotes: catsWithVotes\n    //     }\n\n\n\n    // }\n\n    return state\n}\n\nexport default reducer","const initialState = {\n    winner: {},\n    loser: {},\n}\n\nconst reducer = (state = initialState, action) => {\n    if (action.type === 'ADD_POINT') {\n        const selectedCat = action.payload.cat;\n        const catList = action.payload.catList;\n        Object.assign(selectedCat, {count: selectedCat.count + 1});\n        const loser = catList[Math.floor(Math.random() * catList.length)]\n        return {\n            ...state,\n            winner: selectedCat,\n            loser: loser !== selectedCat ? loser : catList[Math.floor(Math.random() * catList.length)]\n        }\n    }\n\n    return state\n}\n\nexport default reducer","import { combineReducers } from 'redux';\nimport listView from './catList';\nimport duelView from './duelView';\n\nconst reducer = combineReducers({\n    listView,\n    duelView,\n})\n\nexport default reducer","import { applyMiddleware, createStore } from 'redux'\nimport logger from 'redux-logger'\nimport reducer from './reducers/index.js'\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n\nexport default store;\n","export const loadCats = cats => ({ \n    type: 'LOAD_CAT_LIST', \n    cats \n})\n\nexport const addScores = (cat, catList) => ({\n    type: 'ADD_SCORES',\n    payload: {cat, catList}\n})\n\nexport const addPoint = (cat, catList) => ({\n    type: 'ADD_POINT',\n    payload: {cat, catList}\n})","const api = async (path) => {\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n  const response = await fetch(proxyUrl + path)\n  if (response.ok) {\n    return response.json()\n  } else {\n    const error = Error(await response.text())\n    error.statusText = response.statusText\n    error.status = response.status\n    throw error\n  }\n}\n\nconst path = 'https://latelier.co/data/cats.json';\n\n\nconst getCats = () => api(path)\n\nexport default { getCats };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {List, ListItem, ListItemAvatar, ListItemText, Avatar} from '@material-ui/core';\n\nconst mapStateToProps = state => {\n    const cats = state.listView.catList;\n    cats.sort((a, b) => b.count - a.count)\n    return { cats};\n};\nconst ConnectedList = ({ cats }) => (\n    <List>\n        {cats.map(el => (\n            <ListItem key={el.id}>\n                <ListItemAvatar>\n                    <Avatar src={el.url} alt='cat picture'></Avatar>\n                </ListItemAvatar>\n                <ListItemText>SCORE: {el.count}</ListItemText>\n            </ListItem>\n            // <img\n            //     key={el.id}\n            //     src = {el.url} \n            //     alt = ''/>\n        ))}\n    </List>\n);\nconst CatList = connect(mapStateToProps)(ConnectedList);\n\nexport default CatList","import React from \"react\";\nimport { Card, CardActions, CardMedia } from '@material-ui/core';\n\nexport const Cat = ({cat, onClick}) => {\n    const url = cat.url;\n    const points = cat.count;\n    return (\n        <Card style={{height:'40vh', width: '40vw', margin: 20}} onClick={onClick}>\n            <CardMedia\n                style={{height: '80%',backgroundSize: 'cover'}}\n                image={url}\n                title=\"Cat picture\"\n            />\n            <CardActions>\n                {points}\n            </CardActions>\n        </Card>\n    )\n}","import React from 'react';\nimport { connect } from \"react-redux\";\nimport store from './store';\nimport { addScores, addPoint } from './actions';\nimport { Cat } from './cat';\nimport { Link } from \"@reach/router\";\nimport { Button } from '@material-ui/core';\n\nclass ConnectedDuel extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.addPoint = this.addPoint.bind(this);\n\n        this.state = {\n            voted: false,\n            cat1: {},\n            cat2: {},\n        }\n    }\n\n\n    addPoint(el) {\n        const { duelCats } = this.props;\n        store.dispatch(addPoint(el, duelCats));\n        this.setState({ voted: true })\n    }\n\n    getRandomCats() {\n        const { duelCats, winner, loser } = this.props;\n        const { voted } = this.state;\n\n        const cat1 = !voted ? duelCats[Math.floor(Math.random() * duelCats.length)] : winner;\n        const cat2 = !voted ? duelCats[Math.floor(Math.random() * duelCats.length)] : loser;\n\n        return (\n            <div style={{ display: 'flex', flexDirection: 'row', margin: 4, justifyContent: 'center' }}>\n                <Cat cat={cat1} onClick={() => this.addPoint(cat1)} />\n                <Cat cat={cat2} onClick={() => this.addPoint(cat2)} />\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div style={{ margin: 8 }}>\n                {this.props.duelCats.length > 0 ? this.getRandomCats() : undefined}\n                <button><Link to='/list'>TO LIST</Link></button>\n            </div>\n\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    const cats = state.listView.catList || [];\n    const catScores = state.listView.catsWithVotes || [];\n    const duelCats = cats;\n    const winner = state.duelView.winner;\n    const loser = state.duelView.loser;\n    return {\n        duelCats, winner, loser, catScores\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addScores: (cat, catList) => dispatch(addScores(cat, catList))\n    }\n}\nconst Duel = connect(mapStateToProps, mapDispatchToProps)(ConnectedDuel)\n\n\nexport default Duel;\n","import React from 'react';\nimport './App.css';\nimport store from './store';\nimport { loadCats } from './actions';\nimport api from './api';\nimport CatList from './catList';\nimport Duel from './duel';\n// import { Router } from '@reach/router';\n\nclass App extends React.Component {\n  syncData = async () => {\n    const cats = await api.getCats()\n    store.dispatch(loadCats(cats))\n  }\n\n\n  componentDidMount() {\n    // this.unsubscribe = store.subscribe(() => this.forceUpdate())\n    this.syncData()\n  }\n\n  // componentWillUnmount() {\n  //   this.unsubscribe()\n  // }\n\n  render() {\n    return (\n      <div>\n        {/* <Router> */}\n          <Duel path='/' />\n          <CatList path='/list' />\n        {/* </Router> */}\n      </div>\n\n\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n    serviceWorker.unregister()\n);\n\n\n\n\n\n"],"sourceRoot":""}